## The sequence of triangle numbers is generated by adding the natural numbers.
## So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
## 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
## Let us list the factors of the first seven triangle numbers:
##  1: 1
##  3: 1,3
##  6: 1,2,3,6
## 10: 1,2,5,10
## 15: 1,3,5,15
## 21: 1,3,7,21
## 28: 1,2,4,7,14,28
## We can see that 28 is the first triangle number to have over five divisors.
## What is the value of the first triangle number to have over five hundred divisors?

## check original statement
sum(1:7) == 28
cumsum(1:10)

function get_len_divs(n::Int)
    x = 1:n
    divs = x[collect(n % i == 0 for i in x)]
    size(divs, 1)
end
get_len_divs(16)

get_len_divs.(sum(1:7))

min_divs = 500
it = 0
for n in cumsum(1:100000000)
    global it += 1
    n_divs = get_len_divs(n)
    println("it = $(it), n = $(n), n_divs = $(n_divs)")
    if n_divs > min_divs
        println("FOUND!")
        x = 1:sum(1:n)
        show(x[collect(n % i == 0 for i in x)])
    end
    n_divs > min_divs && break
end

## it = 12375, n = 76576500, n_divs = 576
get_len_divs(cumsum(1:12375)[end])

function properdivisors(n::T) where T<:Integer
    0 < n || throw(ArgumentError("number to be factored must be â‰¥ 0, got $n"))
    1 < n || return T[one(T)]
    !isprime(n) || return T[one(T), n]
    f = factor(n)
    d = T[one(T)]
    for (k, v) in f
        c = T[k^i for i in 0:v]
        d = d*c'
        d = reshape(d, length(d))
    end
    sort!(d)
    return d
end

for i in cumsum(1:7)
    println(@sprintf("%4d", i), " ", properdivisors(i) |> length)
end

min_divs = 500
it = 0
for n in cumsum(1:100000000)
    global it += 1
    n_divs = properdivisors(n) |> length
    println("it = $(it), n = $(n), n_divs = $(n_divs)")
    if n_divs > min_divs
        println("FOUND!")
    end
    n_divs > min_divs && break
end

function get_len_divs2(n::Int)
    1 < n || return 1
    !isprime(n) || return 2
    f = factor(n)
    d = 1
    for (k, v) in f
        ## k^i for i in 0:v ==> v+1 factors
        d *= (v + 1)
    end
    d
end
get_len_divs2(28)

min_divs = 500
it = 0
for n in cumsum(1:100000000)
    global it += 1
    n_divs = get_len_divs2(n)
    println("it = $(it), n = $(n), n_divs = $(n_divs)")
    if n_divs > min_divs
        println("FOUND!")
    end
    n_divs > min_divs && break
end
